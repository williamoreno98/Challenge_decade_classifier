# nlp_decade_classifier.py

import pandas as pd
import numpy as np
import unicodedata
import re
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score, f1_score, classification_report, confusion_matrix

# ==========================
# 1) Preprocesamiento
# ==========================
def clean_text(text: str) -> str:
    """Normaliza, convierte a minúsculas y elimina caracteres especiales."""
    text = unicodedata.normalize("NFKC", str(text))
    text = text.lower()
    text = re.sub(r"\d+", " ", text)  # quitar números
    text = re.sub(r"[^\w\s]", " ", text)  # quitar signos de puntuación
    text = re.sub(r"\s+", " ", text).strip()  # espacios múltiples
    return text

# ==========================
# 2) Cargar datos de entrenamiento
# ==========================
df = pd.read_csv("train.csv")   # columnas: text, decade
df = df.dropna(subset=["text", "decade"]).reset_index(drop=True)
df["text_clean"] = df["text"].apply(clean_text)
df["decade"] = df["decade"].astype(int)

X = df["text_clean"].values
y = df["decade"].values

# Dividir en train/test interno (para comparar modelos)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

